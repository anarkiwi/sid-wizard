;ident:8,24
;=================================GLOBAL CONSTANTS==================================================================
; $Id: settings.cfg 385 2014-07-01 12:59:56Z hermitsoft $
;these constans can be used by all the executables (editor/packer/relocator)
;CAUTION: SEQUENCE/PATTERN/TABLE DELIMITERS ($FE/$FF/$7E/$7F,TEMPOTABLE BIT7) ARE HARDWIRED, NEVER EVER MODIFY THEM!!!

MIDI_support = (COMPILEDAPP==1)? 1:0 ;If MIDI-interface support should be included (HerMIDI and others: Sequential, Passport/Syntech, Datel/Siel/JMS, Namesoft, Maplin)

.weak  ;default settings, can be overridden from outside (e.g. from Makefile)
 SID_AMOUNT=1
 SWversion="1.X"
 SFX_SUPPORT=0
 SLOWDOWN_SUPP=0
 SWP_EXPORT=0
 KERNAL_LOADSAVE = 0 ;forces KERNAL load/save in SID-Maker and SID-Wizard
 FINAL_CARTRIDGE_3_FIX = 0 ;reduces MUSICDATA area and lowers upper bound of SID-Maker and disables fastload in SID-Wizard, so Final Cartridge 3 load/save works
.endweak

.if (SID_AMOUNT==1)
SWMversion="1"  ;this is the main version of the SWM format, if the SWM format changes the version numbering of tracker should match
                 ;but there must be possibility to import previous SWM versions in newer SID-Wizard versions (backward compatibility)
.elsif (SID_AMOUNT==2)
SWMversion="S"   ;'S' stands for 'Stereo' (2SID)
.elsif (SID_AMOUNT==3)
SWMversion="T"   ;'T' stands for 'Trio' (3SID)
.fi

Year=2021

;--------------------- basic player/driver settings ----------------------------
PLAYERADDR=$1000 ;memory base-address of musicdata-player routine
NumberOfPlayerTypes=6

;------------------ general machine/platform-specific settings -----------------
banksel=$01 ;not used for other purpose than switching RAM/ROM/IO banks
SIDBASE=$D400 ;BASE-ADDRESS FOR SID-REGISTERS $00..$1f
CHN_AMOUNT=3*SID_AMOUNT
defaultSID2BASE=$D420 ;a default value for 2SID version, can be changed of course
defaultSID3BASE=$D440 ;a default value for 3SID version, can be changed of course
nonSID2addr=$D220 ;an address that is never in SID-address range and low byte is the same as defaultSID2BASE's
nonSID3addr=$D240 ;an address that is never in SID-address range and low byte is the same as defaultSID3BASE's
lowvidram=$0400 ;the VIDEO-RAM in the lower area - lower border graphic (sprite) and pointers are here
COLRPOS=$d800 ;colour-RAM memory-position

;PAL/NTSC machine - hardwired VIC values
PALframes1second=50 ;how many frames a second is - used for clock timer (PAL machines: 50, NTSC machines: 60)
DREANframes1second=50
PALfullrast = 312   ;$138      ;amount of rasterrows (PAL) VIC produces
PALrastercycles = 63           ;how many CPU-cycles are in a rasterline
NTSCframes1second=60 ;how many frames a second is - used for clock timer (PAL machines: 50, NTSC machines: 60)
NTSCfullrast = 263   ;$107     ;amount of rasterrows (PAL) VIC produces
NTSCrastercycles = 65          ;how many CPU-cycles are in a rasterline
row1rast=51  ;$33 ;1st visible rasterline inside border (1st character-row's 1st rasterline in 25row mode)
lastrast=250 ;$FA ;last visible rasterline inside border (last (25th) character-row's last rasterline in 25 row mode)
PAL_CLOCKFREQ = 985248.00    ;Hz
DREAN_CLOCKFREQ = 1023440.00 ;Hz
NTSC_CLOCKFREQ = 1022727.00  ;Hz

.if (MIDI_support!=0)
MIDIC64_EXT_SETTING=1 ;tell MIDI-C64.asm that we take over the settings
MIDIC64_TX_ENABLE=0 ;whether to support Transmitting MIDI-data or not
MIDI_Legacy_support =1 ;standard/legacy extension-port devices using ACIA
MIDIC64_INC_EVENTS=1 ;whether 'EVENT' & 'GetEvent' routine is needed
MIDIC64_INC_NAMES=1 ;include names of devices?
MIDIbuffer_size=32 ;should be bigger than HerMIDI.MaxBuffSize (it uses)
MIDI_noteSize=3
MIDIC64_Watchdog_ini=200 ;0:no watchdog, 1..$ff: init value of watchdog, min. 63 (20ms/320us)
HerMIDI_support=0 ;enables support for HerMIDI Serial/IEC-port device
.if (HerMIDI_support!=0)
HerMIDI_TX_MODE = MIDIC64.HerMIDI.SynchMode
HerMIDI_INC_SYNCHR=(HerMIDI_TX_MODE==MIDIC64.HerMIDI.SynchMode)? 1:0 ;if nonzero: synchron-mode READ gets included
HerMIDI_INC_ASYNCH=(HerMIDI_TX_MODE==MIDIC64.HerMIDI.AsyncMode)? 1:0 ;if nonzero: asynchron-mode READ gets included
HerMIDI_INC_DIRECT=0 ;if nonzero:DirectMode READ (DirecRx) gets included
HerMIDI_PacketSize = (SID_AMOUNT==1)? 5*3 : 7*3 ;CHN_AMOUNT * MIDI_noteSize ; (max. would be 'HerMIDI.MaxBuffSize')
.fi
.fi


;---------------------- SWM/SWS/SWP module specifications --------------------------
.if (SID_AMOUNT==1)
.include"SWM-spec.src" ;SWM module specification file, constants, max. values to fine-tune the maximal memory occupation of parts of tune data - but decreasing them may risk backwards-compatibility
 ;maxptnamount = max_ptnamount - 4*(FINAL_CARTRIDGE_3_FIX!=0)  ;//maximum number of patterns ;will depend on how much pattern-memory must be stolen for code
.else 
 .if (SID_AMOUNT==2) ;some values/amounts will be quite different in 2SID version due to limited memory of C64
maxsubtuneamount=2-1 ;//max. $1F! - amount of subtunes ;counted from 0, so e.g 20 means 21 subtunes (0..$14) 
maxptnamount=90 ; was 105 ; - 4*(FINAL_CARTRIDGE_3_FIX!=0) ;//maximum number of patterns ;will depend on how much pattern-memory must be stolen for code
maxinstamount=30+1 ;//maximum number of instruments
seqlength=126 ;//$7e ;max. $7e - max. storage lenth of a sequence in orderlist
seqbound=128 ;//seqlength+2 ;max.$80 - sequence-boundary size - leave a little space at end of sequence for possible jumpaddress and $00
maxptnlen=250-1 ;//max $f9 (249) ;max size of pattern (in bytes) before any insertion is possible - max $f9 ($f8 effective rows + 4 byte with bigFX)
PTNBOUND=256 ;//maxptnlen+7 (max 256) ;LIKELY TO BE $100, but not more. Less doesn't utilize memory well...
maxinstsize=128 ;//$80 ;//maximum memory available for one specific instrument
instnamelength=8 ;//DON'T MODIFY!!! (will be incompatible) - maximum length of instruments' name - cropped at final tune-packing
MAXCHORDAMOUNT=64 ;//$40 ;//max. $40! - MAXIMUM NUMBER OF CHORDS FOR EMPTYZAK (INCLUDING DUMMYES AT BEGINNING AND END)
maxchordlength=32 ;//$20 ;//maximum length of a particular chord
ChordTableLen=$100
MAXTEMPOPRAMOUNT=64 ;//$40 ;max. $40! - MAXIMUM NUMBER OF TEMPOPROGRAMS FOR EMPTYZAK (INCLUDING DUMMYES AT BEGINNING AND END)
maxtempolength=32 ;//$20 ;//maximum length of a particular tempo-program
TempoTableLen=$80
tuneheadersize=64 ;//$40 ;//don't modify (to keep compatibillity throughout versions)
FSPEEDPOS = 4 ;//position of frame-speed (1..8)
SEQAMOPOS = 12 ;//$C  ;//position of Amount of sequences before empty-end (calculated by packer)
PTAMOUPOS = 13 ;//$D  ;//position of Amount of patterns before empty-end - empty but lengthy patterns count too!!!
INSTAMPOS = 14 ;//$E  ;//position of Amount of non-empty instruments before empty-end
CHRDLEPOS = 15 ;//$F  ;//position of Length of packed chordtable
TMPLENPOS = 16 ;//$10 ;//position of Length of packed tempoprogram-table
DRIVERTYPE_POS=19   ;//$13 ;//position of player/driver-musicroutine type info (light/medium/full/extra/bare/demo), just an information, no restriction caused
TUNINGTYPE_POS=20   ;//$14 ;//position of tuning-type of frequency-table
SWM_HILI_POS  =21 ;//$15 different in 2SID version (original position is '5')
SID2ADD_ID_POS=22 ;//$16 a copy of Config.SID2aID editor setting after saving the file
AUTHORPOS = 24 ;//(tuneheadersize-40) ;//$18
 .elsif (SID_AMOUNT==3)
maxsubtuneamount=1-1 ;//max. $1F! - amount of subtunes ;counted from 0, so e.g 20 means 21 subtunes (0..$14) 
maxptnamount=90 ; was 105 ; - 4*(FINAL_CARTRIDGE_3_FIX!=0) ;//maximum number of patterns ;will depend on how much pattern-memory must be stolen for code
maxinstamount=26+1 ;//maximum number of instruments
seqlength=126 ;//$7e ;max. $7e - max. storage lenth of a sequence in orderlist
seqbound=128 ;//seqlength+2 ;max.$80 - sequence-boundary size - leave a little space at end of sequence for possible jumpaddress and $00
maxptnlen=250-1 ;//max $f9 (249) ;max size of pattern (in bytes) before any insertion is possible - max $f9 ($f8 effective rows + 4 byte with bigFX)
PTNBOUND=256 ;//maxptnlen+7 (max 256) ;LIKELY TO BE $100, but not more. Less doesn't utilize memory well...
maxinstsize=128 ;//$80 ;//maximum memory available for one specific instrument
instnamelength=8 ;//DON'T MODIFY!!! (will be incompatible) - maximum length of instruments' name - cropped at final tune-packing
MAXCHORDAMOUNT=64 ;//$40 ;//max. $40! - MAXIMUM NUMBER OF CHORDS FOR EMPTYZAK (INCLUDING DUMMYES AT BEGINNING AND END)
maxchordlength=32 ;//$20 ;//maximum length of a particular chord
ChordTableLen=$100
MAXTEMPOPRAMOUNT=64 ;//$40 ;max. $40! - MAXIMUM NUMBER OF TEMPOPROGRAMS FOR EMPTYZAK (INCLUDING DUMMYES AT BEGINNING AND END)
maxtempolength=32 ;//$20 ;//maximum length of a particular tempo-program
TempoTableLen=$80
tuneheadersize=65 ;//$40 ;//don't modify (to keep compatibillity throughout versions)
FSPEEDPOS = 4  ;//position of frame-speed (1..8)
SEQAMOPOS = 6  ;//position of Amount of sequences before empty-end (calculated by packer)
PTAMOUPOS = 7  ;//position of Amount of patterns before empty-end - empty but lengthy patterns count too!!!
INSTAMPOS = 8  ;//position of Amount of non-empty instruments before empty-end
CHRDLEPOS = 9  ;//position of Length of packed chordtable
TMPLENPOS = 10 ;//position of Length of packed tempoprogram-table
DRIVERTYPE_POS=11 ;//position of player/driver-musicroutine type info (light/medium/full/extra/bare/demo), just an information, no restriction caused
TUNINGTYPE_POS=12 ;//position of tuning-type of frequency-table
SWM_HILI_POS  =13 ;//different in 2SID version (original position is '5')
SID2ADD_ID_POS=14 ;//a copy of Config.SID2aID editor setting after saving the file
SID3ADD_ID_POS=15 ;//a copy of Config.SID3aID editor setting after saving the file
AUTHORPOS = 25 ;//(tuneheadersize-40) ;//$18
 .fi
DEFAULTPTNLEN=32 ;//$20 ;//FOR EMPTYZAK MACROS - used in editor/converter to define default length of yet unused patterns
SWI_SR_POS=4  ;//used for converter (Sustain/Release byte) and SUSTAIN-inspector for MIDI-velocity in playadapter.inc
SWI_DEFCHORD_POS=8 ;//used for converter (and now SW too)
SWI_PULSETBPT_POS=10 ;//$A used for converter
WFTABLEPOS=16 ;//$10 ;//WF-ARP TABLE BASE-POSITION RELATIVE TO INSTRUMENT-BASEPOSITION
SWM_NOTE_MAX=95 ;//$5F ;//maximum note-value
VIBRATOFX=96 ;//$60 ;//BASE OF VIBRATO-EFFECT
PACKEDMIN=112 ;//$70 ;//minimum value representing 2 packed NOPs
PACKEDMAX=119 ;//$77 ;//maximum value representing 9 packed NOPs
PORTAMFX=120 ;//$78 ;//AUTO-PORTAMENTO NOTE-EFFECT VALUE
DEFAULTPORTA=110 ;//AUTO-PORTAMENTO NOTE-FX DEFAULT SPEED
SYNCONFX=121 ;//$79 ;//SYN-ON NOTE-EFFECT VALUE
SYNCOFFX=122 ;//$7A ;//SYNC-OFF NOTE EFFECT VALUE
RINGONFX=123 ;//$7B ;//RING ON NOTE EFFECT VALUE
RINGOFFX=124 ;//$7C ;//RING-OFF NOTE EFFECT VALUE
GATEONFX=125 ;//$7D ;//GATE-ON (NOTESTART) NOTE EFFECT VALUE
GATEOFFX=126 ;//$7E ;//GATE-OFF(NOTE-MUTE) NOTE EFFECT VALUE
.fi

;SWP format's header (musicdata only, with relative pointers which will be used by special SWP player-routine when SWP's base-address is given in X & Y at player-init)
;00..03: 'SWP1' format-identifier, offset-pointers shouldn't be at psition 0 (because 0 is reserved as end-delimiter in PtrValu table)
SWP_SUBTUNES_OFFS = 4 ;and 5 ;subtune-sequence RELATIVE pointers & -tempos start here, in the same organization as with SWM
SWP_PTNPTL_OFFS = 6 ;and 7
SWP_PTNPTH_OFFS = 8 ;and 9
SWP_INSPTL_OFFS = 10 ;and 11   ;You need to tweak these manually before calling the INIT-routine of the player
SWP_INSPTH_OFFS = 12 ;and 13   ;if you want to have even the instruments/SFX & chords in other place of the memory,
SWP_CHORDTB_OFFS = 14 ;and 15  ;than the patterns/orderlist/tempotable, but be aware that these are all relative addresses,
SWP_CHORDPT_OFFS = 16 ;and 17  ;so you need a little bit of calculation: substrect the SWP-musicdata start-address from the absolute instrument-pointer-table address...
SWP_TEMPOTB_OFFS = 18 ;and 19  ;(Fortunately, at least you can easily cut all the instruments and chords before saving the SWM tune from SID-Wizard.
SWP_TEMPOPT_OFFS = 20 ;and 21  ;But saving only the instrument/chord-data to a memory-address will need some clever manual intervention by monitor-program / whatever.)
;SWP_SFX_BASEPOS = ;tells the SFX-supported player which is the first SFX instrument, so calling an SFX can be 0..X in SFX-instrument number by substracting this inside


;NORMAL (default) PLAYER SETTINGS - all features switched on which are needed for normal demotune-composing (with average rastertime)
;(there are alternative (light/medium/extra) players in 'altplayers.inc' wich different feature-sets (selectable by 'startupmenu.inc') )
PLAYERTYPE=0 ;0=normal, 1=medium, 2=light, 3=extra ;the normal player is the default, but can be overwritten by others selected in startup-menu
feature .block
TRANSPOSESUPP_ON = 1 ;IF POSSIBLE TO TRANSPOSE WITH SEQ-FX
OCTAVESHIFT_ON   = 1 ;IF OCTAVE-SHIFTING IS ACCOUNTED FOR INSTRUMENTS OR NOT
CHORDSUPPORT_ON  = 1 ;CHORDS CALLABLE FROM ARP-TABLE OR NOT
CALCVIBRATO_ON   = 1 ;CALCULATED VIBRATO ON/OFF
VIBRATOTYPES_ON  = 1 ;WHETHER DIFFERENT VIBRATO-TYPES ARE SELECTABLE OR JUST THE DEFAULT 
DETUNESUPPORT_ON = 1 ;DETUNE-COLUMN AUDIBLE OR NOT
PORTAVIBRA_ON    = 0 ;DROP BACK TO VIBRATO WHEN PORTAMENTO/LEGATO REACHED TARGET NOTE?
ARPSPEEDSUPP_ON  = 1 ;IF ARPEGGIO-SPEED IS ACCOUNTED OR NOT (FOR MULTISPEED)
GATEOFFPTR_ON    = 1 ;GATE-OFF WF/PW/FILTER-TABLEPOINTER SUPPORT ON/OF
FILTRESETSW_ON   = 1 ;ABILITY TO SWITCH FILTER-RESET OFF WHEN NOTE WITHOUT INSTRUMENT
FILTKBTRACK_ON   = 1 ;FILTER-CUTOFF-FREQUENCY KEYBOARD-TRACKING EFFECT ON/OFF
PWRESETSW_ON     = 1 ;ABILITY TO SWITCH PULSEWIDTH-TABLE RESET OFF WHEN NOTE WITHOUT INSTRUMENT 
PWKEYBTRACK_ON   = 1 ;PULSEWIDTH KEYBOARD-TRACKING EFFECT ON/OFF
HARDRESTYPES_ON  = 1 ;DIFFERENT HARDRESTART-ADSR/TIMER VALUES FOR EACH INSTRUMENT?
FRAME1SWITCH_ON  = 1 ;IF DISABLED, SEXY $09 HARDRESTART APPLIED FOR ALL INSTRUMENTS
TEMPOPRGSUPP_ON  = 1 ;TEMPO-PROGRAM AND FUNKTEMPO-CHANGING SUPPORT ON/OFF (PATTERN-FX)
FASTSPEEDBIND_ON = 0 ;WHETHER TO CONNECT TICK0..2 IF SPEED IS LOWER (TO PRODUCE SOUND)
DELAYSUPPORT_ON  = 0 ;TRACK-DELAY AND NOTE-DELAY SUPPORT ON/OFF
SUBTUNEJUMP_ON   = 1 ;SUBTUNE-JUMPING SUPPORT ON/OFF
RETAINZEROPAGE_ON= 1 ;SAVING/RESTORING ZEROPAGE BYTES BEFORE/AFTER PLAYER ROUTINE 
ALLGHOSTREGS_ON  = 0 ;USE GHOST-REGISTERS FOR ADSR & PULSEWIDTH TOO, WRITE ALL REGISTERS TO SID RAPIDLY AT END OF PLAYER (QUALITY)
FINEFILTSWEEP_ON = 1 ;WHETHER 11BIT OR 8BIT FILTERSWEEP
FILT_CTRL_FX_ON  = 1 ;FILTER-SWITCHES AND RESONANCE ($D417) SETTING FX SUPPORT
FILTERALWAYS_ON  = 0 ;DON'T SKIP FILTER-PROGRAM (FOR 1-2 FRAMES) TO REDUCE RASTERTIME? - makes PULSEALWAYS_ON happen
PULSEALWAYS_ON   = 0 ;DON'T SKIP PULSE-PROGRAM (FOR 1-2 FRAMES) TO REDUCE RASTERTIME?
VIBSLIDEALWAYS_ON= 0 ;DON'T SKIP VIBRATO/SLIDE/PORTAMENTO (FOR 1-2 FRAMES) TO REDUCE RASTERTIME? - overrides previous 2 settings
;for 'bare' and 'demo'-player takeouts:
SUBTUNESUPPORT_ON= (maxsubtuneamount>0)? 1 : 0
MULTISPEEDSUPP_ON= 1
VOLSET_SUPPORT_ON= 1
FILTSHIFT_SUPP_ON= 1
SEQ_FX_SUPPORT_ON= 1
PORTAME_NOTEFX_ON= 1
WFARP_NOP_SUPP_ON= 1
VIBFREQFX_SUPP_ON= 1
FILTER_SMALLFX_ON= 1
DETUNE_SMALLFX_ON= 1
WFCTRL_SMALLFX_ON= 1
.bend

FeatInstances .segment ;macro with the same settings but as instances for the editor's and exporter's realtime operations
FeatInstance1 ;(the order of the elements in these arrays are important for startup-menu to display available features correctly)
ORDERLISTFX   .byte feature.SEQ_FX_SUPPORT_ON * $80
TRANSPOSESUPP .byte feature.TRANSPOSESUPP_ON * $80 ;$80 is easier to be determined via 'bit' command, so testing doesn't take any register 
OCTAVESHIFT   .byte feature.OCTAVESHIFT_ON * $80
CHORDSUPPORT  .byte feature.CHORDSUPPORT_ON * $80
CALCVIBRATO   .byte feature.CALCVIBRATO_ON * $80
VIBRATOTYPES  .byte feature.VIBRATOTYPES_ON * $80
DETUNESUPPORT .byte feature.DETUNESUPPORT_ON * $80
PORTAVIBRA    .byte feature.PORTAVIBRA_ON * $80
ARPSPEEDSUPP  .byte feature.ARPSPEEDSUPP_ON * $80
GATEOFFPTR    .byte feature.GATEOFFPTR_ON * $80
FILTRESETSW   .byte feature.FILTRESETSW_ON * $80
FILTKBTRACK   .byte feature.FILTKBTRACK_ON * $80
FILTERSHIFT   .byte feature.FILTSHIFT_SUPP_ON * $80
PWRESETSW     .byte feature.PWRESETSW_ON * $80
PWKBEYBTRACK  .byte feature.PWKEYBTRACK_ON * $80
FeatInstance2
ARPTABLE_NOP  .byte feature.WFARP_NOP_SUPP_ON * $80
HARDRESTYPES  .byte feature.HARDRESTYPES_ON * $80
FRAME1SWITCH  .byte feature.FRAME1SWITCH_ON * $80
TEMPOPRGSUPP  .byte feature.TEMPOPRGSUPP_ON * $80
FASTSPEEDBIND .byte feature.FASTSPEEDBIND_ON * $80
DELAYSUPPORT  .byte feature.DELAYSUPPORT_ON * $80
SUBTUNEJUMP   .byte feature.SUBTUNEJUMP_ON * $80
RETAINZEROPG  .byte feature.RETAINZEROPAGE_ON * $80
ALLGHOSTREGS  .byte (feature.ALLGHOSTREGS_ON || SID_AMOUNT>1) * $80 ;always use all ghost-registers for 2SID/3SID
FINEFILTSWEEP .byte feature.FINEFILTSWEEP_ON * $80
FILT_CTRL_FX  .byte feature.FILT_CTRL_FX_ON * $80
FILTERALWAYS  .byte feature.FILTERALWAYS_ON * $80
ALLSMALLFX    .byte (feature.FILTER_SMALLFX_ON || feature.DETUNE_SMALLFX_ON || feature.WFCTRL_SMALLFX_ON) * $80
PULSEALWAYS   .byte feature.PULSEALWAYS_ON * $80
VIBSLIDALWAYS .byte feature.VIBSLIDEALWAYS_ON * $80
FeatInstances_end
.endm


;============================ PROGRAM CONFIGURATION ================================================
;configuration constants for the editor only:
;--------------------------------------------
DEFAULTHRADSR= $0F00    ;DEFAULT VALUE OF HR-ADSR IF INSTRUMENT-BASED HR-TYPE SWITCHED OFF
defsubtempo1 = $86      ;default subtune-tempo 1 (used for workfile initialization)
defsubtempo2 = $83      ;default subtune-tempo 1 (used for workfile initialization)
minptnlen    = 1        ;minimal pattern-length (to avoid zero-lon patterns)

FILTER_MUTESOLO=1 ;WHETHER FILTER (AS WELL AS FILTER-PROGRAM) SHOULD BE DISABLED FOR MUTED TRACKS - PREVENTS FILTER-NOISES ON OLD SID
ENABLEPACKEDNOP=1 ;if value is 1, successive NOPs will be compressed as $70..$77 signals (when saving tune)
OPTIMIZEPTN  = 1  ;enable pattern-optimization? (e.g. unneeded repetitive instrument-selection caused by instrument auto-typing mode)
OSCILLOSCOPE = 1  ;enable/disable oscilloscope-display for channel 3
GHOSTPIXEL_ON= 1  ;whether the program would use idle-graphic ghost-pixel columns to make orderlist more readable
 GHOSTPIXEL_TYPE=1 ;1 for hermit's set, 2 for Soci's set (better looking chars but no separation between pairs)
 GHOSTPIXPOS=$3FFF ;memory address of idle-graphic byte used by VIC for ghost-pixels - careful!!! inside music area!
 ghostpixel=%10000001 ;this masks the low-resolution (X-extended) lower border sprites with $3FFF idle graphics
.if ( GHOSTPIXEL_ON && PTNBOUND==256 && maxptnlen<250 && maxsubtuneamount<18 )
 BORDERSPX=$18		;starting coordinate of bordersprites
.else
 BORDERSPX=$19		;starting coordinate of bordersprites
.fi
PALseqdistance = 7 ;either 6 or 7 - Y pixel vertical distance between sequence-rows in orderlist
NTSCseqdistance= 6 ;should be this for NTSC machines to be seen in border
POS_DISP_MOD   = 2 ;if 1: playback-positions are inverted in orderlist ;if 2: playback-pasitions are blinking in orderlist
 PBLINKSPEED=30     ;if mode 2 selected in POS_DISP_MOD, this is the blinking speed
 PBLINKRATIO=6      ;blinking on/off ratio divisor 
 IDLEBLINK_ON=0     ;should it blink if playback is stopped?

repspd1=$0d          ;first keypress repeat delay in frames (x20ms)
repspd2=$02          ;continuous keyrepeat delay (repetition speed) in frames (x20ms)
maxadvancesteps = 25 ;max amount of autoadvance after pattern-paste operation (if pasting is longer, cursor won't follow)
CursorFlashSpd1 = 1  ;flashing-speed of cursor in jamming mode
CursorFlashSpd2 = 3  ;flashing-speed of cursor in editing mode
ffwdspeed       = (SID_AMOUNT==1)? 4 : (SID_AMOUNT==2)? 2+1 : 2+1 ;how many times faster when fast-forward used
PALmaxframespeed= (SID_AMOUNT==1)? 8 : (SID_AMOUNT==2)? 4 : 3 ;maximal framespeed on PAL/Drean machines (50Hz * 8 = 400Hz)
;NTSCmaxframespeed=6 ;max. framespeed of NTSC machines (much less rastertime, but 60Hz*6=360Hz )

;---editor non-modified colour scheme------------------------
bordercolor =0  ;(default:0) colour of border
mutecol     =11 ;(default:11) colour of muted tracks' note and instrument-column
playbarcol  =14 ;(default:6) colour of single-speed rasterbar
jambarcol   =4  ;(default:11) colour of jamming-mode rasterbar
ptplaybarcol=5  ;(default:5) colour of patternplay-mode rasterbar
multibarcol =6  ;(default:6) colour of player-indicator multispeed rasterbars (0 to disable)
;multilincol= 3  ;(default:14) colour of line before multispeed player-rasterbars
detutcol  = 5   ;(default:5) detune-table numbers' colour
pwtktcol  = 6   ;default:6) PW-keybard track table colour
fltktcol  = 9   ;default:9) Filter keyboard-track table colour
DISABLECOL= 11  ;in SW-light the disabled features appear in this colour
;modifiable colours are described in theme-tables (displayer2.inc)
fileBGcolor=15  ;colour of file-dialog's background
fileFGcolor=11  ;colour of file-dialog's characters

;--------------- settings mainly used by menu and file-dialog -----------------
menuxpos = 9    ;menu X position on screen
menuypos = (MIDI_support!=0)? (SID_AMOUNT<3)?0:0 : 2   ;menu Y position on screen
MINDEVICE= 8    ;minimum disk-device number
MAXDEVICE= 15   ;maximum disk-device number
ddevice  = 8    ;default disk device

dirxpos   = 1   ;filelist X screen position
dirypos   = 4   ;filelist Y screen position
maxnamelen= 12  ;maximum filename-length to display
extlen    = 4   ;extension-length (with dot)
authorilen= 40  ;max. length of author-info that can be displayed & typed
namecolums= 3   ;number of filename-columns (screenwidth divided by max. filename-length
dirvmem= lowvidram+dirypos*40+dirxpos ;Video-RAM base memory address of filelist
disknam= lowvidram+40*24+5            ;Video-RAM place of diskname $ disk-ID (disk-header)
diskfree=lowvidram+40*24+35           ;place of free disk-place display
filenamp=lowvidram+10                 ;filename-position on screen
authorip=lowvidram+40*2               ;author-info screen-position
namesep= $22    ; " filename-delimiter character code
filelistheight=19 ;height of file-lister/selector subwindow
filelstmax= filelistheight*namecolums ;maximum length of filelist that can be displayed on 1 screen
RETURNcode=13   ;return/enter (carreturn) charactercode  (signs end of directory)

ConfigFileName="swconfig" ;.prg used to save/restore SID-Wizard config (if LOAD/SAVE is possible

;-------------------------SID-Maker configuration-------------------------------
EXEBGROUND  =0  ;executable export background color
EXEBORDCOL  =0  ;executable export border-color
EXETEXTCOL  =3  ;executable export text-colour
EXEBARCOL1  =12 ;executable export single-speed playbar-color
EXEBARCOL2  =11 ;executable export multispeed playbor-color
RELOC_MIN_HI=$02 ;minimum value of relocation target start-address ($0200 may be used in case the remaining memory is too scarce)
RELOC_MAX_HI=$FF ;maximum value of relocation target start-address (BE CAREFUL NOT TO OVERWRITE $FFF8..$FFFF IRQ POINTERS!)
relocRepSpd2=1  ;continuous keyrepeat delay for relocation-address setting


;==============ZEROPAGE VARIABLES AND POINTERS =================================
;Main loop uses (in editor):
zpvari2 = 2     ;universal variable/3-byte ARRAY, used by displayer in main loop
zpvari3 = 3     ;universal variable, used by displayer in main loop
zpvari4 = 4     ;universal variable, used by displayer in main loop
zpvari5 = 5     ;universal variable, used by displayer in main loop
zpvari6 = 6     ;universal variable, used by displayer in main loop
zpvari7 = 7     ;universal variable, used by displayer in main loop
zpvari8 = 8     ;universal variable, used by displayer in main loop
zpvari9 = 9     ;universal variable, used by displayer in main loop
zparray1= $0a   ;a 3 byte (or more -max 6 till $10 - if you wish) byte-array used by displayer in main loop

;Player uses:
.if (COMPILEDAPP==1)
PLAYERZP=$fe    ;routine saves and restores the value of these 2 zeropage lacotions (so it can overlap)
.else ;if (COMPILEDAPP==2)
PLAYERZP=$fe
.fi

.if (COMPILEDAPP==1)
PLAYERZP_VAR=$10 ;if this is 0, player doesn't use, otherwise player (in the editor) can use the zeropage extensively
;..followed by cca. 6*(3*7) = 126 bytes of variables (so the last byte is $8E)
.else
PLAYERZP_VAR=0  ;disable zeropage-variables for player in SID-Maker (can be used though, in that case specify what base address to use)
.fi

;don't use address $BA, it's used at startup to detect default device-number (SW/SM was loaded from)

;IRQ uses:
shiftsi=$c0     ;shift key signal (00- no shift, 01- l/r shift was pressed)
cbmsig =$c1     ;BE AFTER SHIFTSI! ;C= key signal (00-no C=, 01- C= pressed )
repecnt=$c2     ;keyrepeat-counter
zpkcsel=$c3     ;keyboard-column rolling value to select for $dc00, used by keyhandler in IRQ
zpkyand=$c4     ;keyboard-row rolling value to AND with $dc01, used by keyhandler in IRQ
zpkeysi=$c5     ;sings keypress, counts how many keys are pressed (if 0, no key pressed) in IRQ keyhandler
zpkeyco=$c6     ;keyboard-column counter (0..7) for keyhandler in IRQ
zpkeyro=$c7     ;keyboard-row counter (0..7) for keyhandler in IRQ
zprvkey=$c8     ;previous pressed key (tested to reset repeat-counter if different keys were switched without rest)
zpvari0=$c9     ;universal variable
ptnzptr=$ca     ;current pattern's pointer, used by IRQ routines

;editor & menu & exporter use these zeropage locations & pointers:
compzvar = $d0  ;menu/filer/compressor universal zeropage variable
compzvar2= $d1  ;menu/filer/compressor universal zeropage variable   ;e.g. cursorposition of instrument/file-naming
compzvar3= $d2  ;menu/filer/compressor universal zeropage variable
compzvar4= $d3  ;menu/filer/compressor universal zeropage variable   
compztmp = $d4  ;temporary pointer storage for compressor routine
decozptr = $d6  ;pointer for unpacked music data used by compressor/decompressor - don't be the same as editor-pointers
compzptr = $d8  ;pointer for packed music data used by compressor/decompressor
inszptr = $da   ;actual instrument's pointer, used by Displayer in main loop
vidzptr = $dc   ;VIDEO-RAM & COLOUR-RAM pointers used by Displayer routines of main loop
datzptr = $de   ;universal data-pointers used by displayer routines of main loop

;zeropage-pointers used only by SID-Maker application
expoendadd =$e0 ;end address of data to export (SAVE end-address)
subtuneadd =$e2 ;subtune-table base-address
ptnptloadd =$e4 ;calculated base address of lo-patternpointers
ptnpthiadd =$e6 ;calculated base address of hi-patternpointers
insptloadd =$e8 ;calculated base address of lo-instrument pointers
inspthiadd =$ea ;calculated base address of hi-instriment pointers
chordptadd =$ec ;calculated base address of chordtable-pointers
chordtbadd =$ee ;calculated base address of chordtable
tempoptadd =$f0 ;calculated base address of tempotable-pointers
tempotbadd =$f2 ;calculated base address of tempotable
relocamount=$f4 ;2 zeropage bytes to describe 16bit (2's complement) amount of relocation/pointer-change

;don't use $fe, it's reserved for player.asm

;============================================== MISC ====================================================================
selfmod=$00     ;default value for self-modified code's immediate operands
selfmodA=$1111  ;default value for self-modified code's absolute-addressing operands (nonzero to prevent zp-optimization)
selfmodZPA=$11  ;default value for self-modified code's zeropage-addressing operands

;=====================calculate music-data pointers & lengths ===========================================================
;----don't modify the order without re-adjusting the equations correctly, otherwise stupid overlaps will occur
SUBTUNES=MUSICDATA+0
PPTRLO=(SID_AMOUNT!=3)? SUBTUNES+(maxsubtuneamount+1)*(8*SID_AMOUNT) : SUBTUNES+(maxsubtuneamount+1)*32
PPTRHI=PPTRLO+(maxptnamount+1)
INSPTLO=PPTRHI+(maxptnamount+1)
INSPTHI=INSPTLO+(maxinstamount+1)
CHDPTRLO=INSPTHI+(maxinstamount+1)
TEMPTRLO=CHDPTRLO+(MAXCHORDAMOUNT+1)
ptnlength=TEMPTRLO+(MAXTEMPOPRAMOUNT+1) ;place where current pattern-lengths are cached
ptnsize=ptnlength+(maxptnamount+1)      ;place where current pattern-sizes are cached
;---editor workfile data is to be packed & saved from here-----------
.if (COMPILEDAPP==1)
TUNEHEADER= ptnsize+(maxptnamount+1)  ;some tune-specific settings workfile/tune/subtune related settings - DON'T CHANGE ORDER!!!
.else
TUNEHEADER = normalPlayer.player.TUNE_HEADER;MUSICDATA
.fi   ;the tune-header structure is specified in 'SWM-spec.src'
authorinfo=TUNEHEADER+AUTHORPOS       ;last element of tune-header
;--------effective music data
SEQUENCES=TUNEHEADER+tuneheadersize
PATTERNS=SEQUENCES+(maxsubtuneamount+1)*(CHN_AMOUNT)*seqbound
PTN0=PATTERNS+0                       ;length is only 2 for pattern0
RESTPTN= ((PTN0+2+$100)/$100) * $100  ;pattern0 + 2, then same effect as .ALIGN $100
INSTRUMENTS= ((RESTPTN+(maxptnamount-1)*PTNBOUND+$100)/$100) * $100
endinstrum=INSTRUMENTS+(maxinstamount-1)*maxinstsize
CHORDS=endinstrum+0
TEMPOTBL=CHORDS+ChordTableLen
RESTEMP=TEMPOTBL+(2+2*CHN_AMOUNT)
endoftune=TEMPOTBL+TempoTableLen      ;signs for tune-initer where to stop deletion

;calculations for instrument-table insterter/deleter:
;-----------------------------------------------------
tblwidth = 3    ;width of instrument-tables
tblstart = WFTABLEPOS ;$10 ;starting point of instrument tables in instrument
tblamoun = 3    ;amount of tables, $ff endsignals need to be accounted, they take 1 bytes
lastbladdr = maxinstsize-instnamelength
lastinstpt = lastbladdr - ( (lastbladdr-tblstart-tblamoun) % tblwidth ) - 1 ;...
;lastinstpt is memory index of instrument's 1st column of last row to test if empty (zero) or not ($ff, pattern full)


;----------------------------------------------------------------------------------------------
;ROM routine jumptable addresses
KERNAL .block
SETNAM = $ffbd  ;Set file name parameters. Input: A = File name length; X/Y = Pointer to file name. (Real address: $FDF9)
SETLFS = $ffba  ;Set file parameters. Input: A = Logical number; X = Device number; Y = Secondary address. (Real address: $FE00)
OPEN   = $ffc0  ;Open file. (Must call SETLFS and SETNAM beforehands.) Used registers: A, X, Y. (Real address: ($031A), $F34A)
CLOSE  = $ffc3  ;Close file. Input: A = Logical number. Used registers: A, X, Y. (Real address: ($031C), $F291.)
CHKIN  = $ffc6  ;Define file as default input. (Must call OPEN beforehands.) Input: X = Logical number. Used registers: A, X. (Real address: ($031E), $F20E)
CHRIN  = $ffcf  ;Read byte from default input (for keyboard, read a line from the screen). (If not keyboard, must call OPEN and CHKIN beforehands.) Output: A = Byte read. Used registers: A, Y. (Real address: ($0324), $F157.)
CHKOUT = $ffc9  ;Open a channel for output (Registers affected:  A, X), input: A=data, X = logical file number , Real address: ($0320), $F250.
CHROUT = $ffd2  ;(BSOUT) Write byte to default output. (If not screen, must call OPEN and CHKOUT beforehands.) Input: A = Byte to write. (Real address: ($0326), $F1CA)
CLRCHN = $ffcc  ;Close default input/output files (for serial bus, send UNTALK and/or UNLISTEN); restore default input/output to keyboard/screen. Used registers: A, X. (Real address: ($0322), $F333)
SCINIT = $ff81  ;Initialize VIC; restore default input/output to keyboard/screen; clear screen; set PAL/NTSC switch and interrupt timer. Used registers: A, X, Y. (Real address: $FF5B.)
LOAD   = $ffd5  ;LOAD. Load or verify file. (Must call SETLFS and SETNAM beforehands.) Input: A: 0 = Load, 1-255 = Verify; X/Y = Load address (if secondary address = 0).
                ;Output: Carry: 0 = No errors, 1 = Error; A = KERNAL error code (if Carry = 1); X/Y = Address of last byte loaded/verified (if Carry = 0). Used registers: A, X, Y. (Real address: $F49E.)  
LOAD2  = $f4a5  ;the entry point that ILOAD refers to
SAVE   = $ffd8  ;SAVE. Save file. (Must call SETLFS and SETNAM beforehands.) Input: A = Address of zero page register holding start address of memory area to save; 
                ;X/Y = End address of memory area plus 1. Output: Carry: 0 = No errors, 1 = Error; A = KERNAL error code (if Carry = 1). (Real address: $F5DD.)
SAVE2  = $f5ed  ;the entry point that ISAVE refers to
READST = $ffb7  ;Fetch status of current device, value of ST variable. (For RS232, status is cleared.),No Input , Output: A = Device status., Used registers: A.,Real address: $FE07.
;Indirect ROM addresses (possibly used by cartridge fastloaders)
IOPEN = $031A   ;Indirect entry to Kernal OPEN Routine ($F34A).
ICLOSE= $031C   ;Indirect entry to Kernal CLOSE Routine ($F291).
ICHKIN= $031E   ;Indirect entry to Kernal CHKIN Routine ($F20E).
ICKOUT= $0320   ;Indirect entry to Kernal CHKOUT Routine ($F250).
ICLRCH= $0322   ;Indirect entry to Kernal CLRCHN Routine ($F333).
IBASIN= $0324   ;Indirect entry to Kernal CHRIN Routine ($F157).
IBSOUT= $0326   ;Indirect entry to Kernal CHROUT Routine ($F1CA).
ICLALL= $032C   ;Indirect entry to Kernal CLALL Routine ($F32F).
ILOAD = $0330   ;Indirect entry to Kernal LOAD Routine ($F4A5).
ISAVE = $0332   ;Indirect entry to Kernal SAVE Routine ($F5ED).
;possible resulting error codes after a READST (with their addresses in ROM):
IOerror .block
NO_ERROR              = 0
TOO_MANY_FILES        = 1 ;$F6FB
FILE_OPEN             = 2 ;$F6FE
FILE_NOT_OPEN         = 3 ;$F701
FILE_NOT_FOUND        = 4 ;$F704
DEVICE_NOT_PRESENT    = 5 ;$F707
NOT_INPUT_FILE        = 6 ;$F70A
NOT_OUTPUT_FILE       = 7 ;$F70D
MISSING_FILENAME      = 8 ;$F710
ILLEGAL_DEVICE_NUMBER = 9 ;$F713
.bend
.bend
ROMIRQ = $ea31  ;default value for $0314,$0315 ROM IRQ vectors
ROMRTI = $ea86 ;the RTI command at the end of $EA31 IRQ routine, used as 'dummyirq' in case of banksel=$36/$37 (KERNAL-ROM turned on)


;==========================================================================
;common macros (used by editor and exporter, should be declared at the beginning, that's why they're here):
divAby16 .macro
        lsr
        lsr
        lsr
        lsr
.endm

.if (SID_AMOUNT>=2)
SID23setter .macro
typSID2add .word defaultSID2BASE,$D500,$D600,$D7E0,$DE00,$DF00 ;typical/most used SID2 addresses first
typSID2add_end
restSID2addH .byte $d4,$d5,$d6,$d7,$de,$df
maxSID2aID= (typSID2add_end-typSID2add)/2 + ($D800-$D420)/$20 + ($E000-$DE00)/$20 - 2

CalcSIDaddID
        asl ;*2
        tay
        cpy #(typSID2add_end-typSID2add)
        bcs +
        lda typSID2add+0,y
        ldx typSID2add+1,y
        jmp ++
+       sec
        sbc #(typSID2add_end-typSID2add)-4
        pha
        lsr
        lsr ;/2
        lsr ;/4
        lsr ;/8
        tay
        ldx restSID2addH,y
        pla
        asl ;*4
        asl ;*8
        asl ;*16
        asl ;*32
+       rts

IncSID2address
        ldx SID2aID
        inx
        cpx #maxSID2aID+1
        bcc +
        ldx #0
+       stx SID2aID
        jmp CalcSID2addID

DecSID2address
        dec SID2aID
        bpl CalcSID2addID
        lda #maxSID2aID
        sta SID2aID
CalcSID2addID lda SID2aID
        jsr CalcSIDaddID
        sta SID2add+0
        stx SID2add+1
        rts

 .if (SID_AMOUNT>=3)
maxSID3aID=maxSID2aID
IncSID3address
        ldx SID3aID
        inx
        cpx #maxSID3aID+1
        bcc +
        ldx #0
+       stx SID3aID
        jmp CalcSID3addID
DecSID3address
        dec SID3aID
        bpl CalcSID3addID
        lda #maxSID3aID
        sta SID3aID
CalcSID3addID lda SID3aID
        jsr CalcSIDaddID
        sta SID3add+0
        stx SID3add+1
        rts
 .fi

.endm ;end of 'SID23setter' macro
.fi

;=============================================================================================================================
; vim: sw=4 ts=4 syntax=asm:

; vesselnmi.inc 2021 m64

; NMI code

vessel_NMI_ON
        lda #$7f
        sta $dc0d  ;disable timer interrupts which can be generated by the two CIA chips
        lda #$80
        sta $dd0d  ;
        lda $dc0d  ;by reading this two registers we negate any pending CIA irqs.
        lda $dd0d  ;if we don't do this, a pending CIA irq might occur after we finish setting up our irq.
        
        ; configure VESSEL for NMI: ON 1001
        ;Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000100  ;Set bit2 to 1
        sta $dd00

        ;Set Port B to output
        lda #$ff
        sta $dd03

        ;Send command 0x4, enable NMI.
        lda #$fd
        sta $dd01
        lda #$04
        sta $dd01
        lda #%00001001 ; Vessel CFG Featues: NMI + NMI status only
        sta $dd01

        ; NMI usually points to label 'NMI' (0aea), no need to save old vector

        lda #<VESSELNMI
        ldy #>VESSELNMI
        jsr MIDIC64.setNMI

        lda #$90 ;%10010000 ; /FLAG only
        sta $dd0d
           
        rts

vessel_NMI_OFF
        ; disable playback in NMI handler

        lda #$7f
        sta $dc0d  ;disable timer interrupts which can be generated by the two CIA chips
        ; sta $dd0d  ;

        lda $dc0d  
        lda $dd0d  

        ; configure VESSEL for NMI: OFF 
        ; Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000000  ;Set bit2 to 1
        sta $dd00

        ; Set Port B to output
        lda #$ff
        sta $dd03

        ; Send command 0x4, disable NMI.
        lda #$fd
        sta $dd01
        lda #$04
        sta $dd01
        lda #%00000000
        sta $dd01

        ; restore NMI
        lda #<NMI
        ldy #>NMI
        jsr MIDIC64.setNMI  

        rts

        ; NMI PLAY ROUTINE (on NMI)
VESSELNMI
        pha             ;store sensitive registers and bank status
        lda banksel
        pha
        txa             ;faster entry from MIDI-C64
        pha
        tya
        pha

        lda #$35    
        sta banksel

        bit $dd0d
        
        inc vidram+29+40+40+40+40+80

        jsr NMIReadMIDI
        cpy #MIDI.TimingClock
        bne _exitNMI
                
        inc vidram+29+40+40+40+40+80+40
        lda #1
        jsr playadapter.playsubb
        jsr playadapter.followplay

        inc playadapter.seqrefr ;refresh also when playing changes SEQCNT,x
        inc display.insrefr+1
        jsr playadapter.padapter

_exitNMI
        pla
        tay
        pla
        tax
        pla             ;written at NMI entry, stored value of $01 ROM/RAM bank switcher
        sta banksel
        pla   

        rti  

NMI_MIDI_STOP  .byte 0
NMI_MIDI_START .byte 0

VESSEL_NMISTOP
        ; MIDI STOP: stop playback
        sei
        jsr vessel_NMI_OFF

        lda #0
        sta $d020
        sta $d021
        sta NMI_MIDI_STOP
        sta VESSELMODE
        lda #1
        sta wait4play+1
        ; re init vessel disp
        lda #1
        sta vesseldisp+1

        ldx #4 ; normal is purple
        stx plybcol
        stx plybcol+1 ; restore border
        stx $d020
        lda #0
        sta menu.m64btx

        lda #$35
        sta banksel 
        jmp menu.retoedi 
        
        jmp goback

; NMI MIDI READ Routine
NMIReadMIDI ; read without changing border color
        ; Reset PA2 to signal INPUT mode
        lda $dd00
        and #%11111011 ; Set bit2 to 0
        sta $dd00
        ; Set Port B to input
        lda #$00
        sta $dd03

        ; Read the available number of bytes. Max number of bytes in one go is 255 (not 256)
        ldy $dd01 ; Read bytecount from Port B
        beq _VesselEmpty
_RxByte lda $dd01 ; Read MIDI byte from Port B
        cmp #MIDI.StopSeqPlay
        bne +
        lda #1
        sta NMI_MIDI_STOP

+       cmp #MIDI.StartSqPlay
        bne +
        lda #1
        sta NMI_MIDI_START

+       dey
        bne _RxByte
_VesselEmpty
        tay
        ; Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000100
        sta $dd00
        ; Set Port B to output
        lda #$ff
        sta $dd03
        rts

; menu point NMI MODE handling
run_menupoint_syncmode        
        lda MIDIdev                     ; no MIDI no NMI     
        bne +
        jmp _menupoint_back             ; no MIDI no SYNC

+       ; before switching to next mode:
        ; if NMI MODE is on, disable it first
        lda VESSELMODE
        cmp #2
        bne +
        jsr vessel_NMI_OFF
       
+       inc VESSELMODE                  ; circular switch to next mode
        lda VESSELMODE                  ; 
        cmp #3                          ; last?
        bne +

        ldx #4                          ; restart at 0
        lda #0
        sta VESSELMODE
        jmp _menup_sync_mode_ret        ; and go back

+       cmp #VMODE_EXT_MIDI_SYNC        ; if EXT MIDI SYNC
        bne +
        ; nothing special to prepare here
        ldx #6 ; ext MIDI sync is blu
        jmp _menup_sync_mode_ret
        
+       cmp #VMODE_NMI_SYNC
        beq _VNMI_PlayBeg

        ; unknown mode:
        lda #0
        sta VESSELMODE
        ldx #4
        jmp _menup_sync_mode_ret 
        


_VNMI_PlayBeg 
        lda #$35
        sta banksel
        
        sei

        ldy #0
        sty NMI_MIDI_START
        sty IRQ.fspdctr+1 ;we must start with singleplayer after getting back to IRQ
        
        ; disable raster irq    
        lda $d01a
        and #$fe
        sta $d01a
        
        jsr vessel_NMI_ON
        cli
        ldy #0
        sty NMI_MIDI_STOP
        sty NMI_MIDI_START
        ldx #1
        stx playadapter.followp+1
        lda #1
        sta playadapter.playmod
        jsr playadapter.ptploff
        jsr playadapter.inisubb

        inc menu.clearmenu
        jsr menu.dispmenu
        jsr menu.menuback

        ; reset y scrl, 25rows
        lda $d011
        ora #%00001011
        sta $d011

        lda #$ff
        sta $d015 ; sprites ON

        ; lda #52
        ; ; sta $d001; spr 0
        ; sta $d003 ; spr 1
        ; sta $d005 ; spr 1
        ; sta $d007 ; spr 1
        ; sta $d009 ; spr 1
        ; sta $d00b ; spr 1
        ; sta $d00d ; spr 1
        ; sta $d00f ; spr 1

        ldx #0
        stx $d020
        ldx #1
        lda #2
             
_menup_sync_mode_ret
        stx plybcol
        stx plybcol+1 ; restore border
        sta menu.m64btx
_menupoint_back   
        jmp vessel

clrscrn1 
        ldy #0
-       lda #$20        
        sta $0400,y
        sta $0500,y
        sta $0600,y
        sta $0700,y 
        iny
        bne -
        rts

clrscrn2 ldy #0
        sty $d015       ;switch off sprites to prevent rastertime-cycles being stolen from CPU
-       lda #$20        ;clear screen
        sta $0400,y
        sta $0500,y
        sta $0600,y
        sta $0700,y
        lda #EXETEXTCOL
        sta $d800,y
        sta $d900,y
        sta $da00,y
        sta $db00,y
        iny
        bne -
        rts